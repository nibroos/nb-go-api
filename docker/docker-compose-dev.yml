name: nb-go-api

services:

  gateway:
    build:
      context: ../gateway
      dockerfile: Dockerfile
      network: host
    ports:
      - "${GATEWAY_PORT:-80}:80"
    image: nibroos/nb-go-gateway-dev:1.0.250204
    networks:
      - nb-go-api-network
    depends_on:
      - service
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_DB_TEST: ${POSTGRES_DB_TEST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      GATEWAY_PORT: ${GATEWAY_PORT}
      SERVICE_GRPC_PORT: ${SERVICE_GRPC_PORT}
      SERVICE_REST_PORT: ${SERVICE_REST_PORT}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
      SERVICE_TYPE: main

  service:
    build: 
      context: ../service
      dockerfile: Dockerfile.dev
      network: host
    image: nibroos/nb-go-service-dev:1.0.250204
    networks:
      - nb-go-api-network
    ports:
      - "${USERS_SERVICE_GRPC_PORT:-50051}:${USERS_SERVICE_GRPC_PORT:-50051}"
      - "${USERS_SERVICE_REST_PORT:-4001}:${USERS_SERVICE_REST_PORT:-4001}"
    depends_on:
      - postgres
    volumes:
      - ./../service:/app
    env_file:
      - .env
    environment:
      SEEDER_DIR: /apps/internal/database/seeders

  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      POSTGRES_DB: ${POSTGRES_DB:-nb_go_api}
    networks:
      - nb-go-api-network
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-nb-go-api:/var/lib/postgresql/data

  # asynq-client:
  #   build:
  #     context: ../service
  #     dockerfile: Dockerfile.dev
  #     network: host
  #   image: nibroos/nb-go-asynq-client:1.0.250204
  #   networks:
  #     - nb-go-api-network
  #   depends_on:
  #     - redis
  #   environment:
  #     REDIS_HOST: ${REDIS_HOST}
  #     REDIS_PORT: ${REDIS_PORT}
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}
  #     REDIS_DB: ${REDIS_DB}
  #   command: ["go", "run", "./client/main.go"]

  # asynq-server:
  #   build:
  #     context: ../service
  #     dockerfile: Dockerfile.dev
  #     network: host
  #   image: nibroos/nb-go-asynq-server:1.0.250204
  #   networks:
  #     - nb-go-api-network
  #   depends_on:
  #     - redis
  #   environment:
  #     REDIS_HOST: ${REDIS_HOST}
  #     REDIS_PORT: ${REDIS_PORT}
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}
  #     REDIS_DB: ${REDIS_DB}
  #   command: ["go", "run", "./worker/server.go"]

  # redis:
  #   image: "redis:alpine"
  #   container_name: redis-nb-go-api
  #   networks:
  #     - nb-go-api-network
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - ./redis.conf:/usr/local/etc/redis/redis.conf
  #   command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

  # scheduler:
  #   build:
  #     context: ../service
  #     dockerfile: Dockerfile.dev
  #   networks:
  #     - nb-go-api-network
  #   ports:
  #     - "4080:4080"
  #   depends_on:
  #     - postgres
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     POSTGRES_DB_TEST: ${POSTGRES_DB_TEST}
  #     POSTGRES_PORT: ${POSTGRES_PORT}
  #     POSTGRES_HOST: ${POSTGRES_HOST}
  #     GATEWAY_PORT: ${GATEWAY_PORT}
  #     SERVICE_GRPC_PORT: ${SERVICE_GRPC_PORT}
  #     SERVICE_REST_PORT: ${SERVICE_REST_PORT}
  #     JWT_SECRET: ${JWT_SECRET}
  #     REDIS_HOST: ${REDIS_HOST}
  #     REDIS_PORT: ${REDIS_PORT}
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}
  #     REDIS_DB: ${REDIS_DB}
  #     SERVICE_TYPE: scheduler

  # asynq-ui:
  #   image: "hibiken/asynqmon:latest"
  #   container_name: asynq-ui-nb-go-api
  #   networks:
  #     - nb-go-api-network
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     REDIS_URL: "redis://redis:6379"
  #     REDIS_ADDR: "redis:6379"
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}
  #     REDIS_DB: ${REDIS_DB}

volumes:
  postgres-nb-go-api:

networks:
  nb-go-api-network:
    driver: bridge
